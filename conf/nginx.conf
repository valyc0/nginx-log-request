worker_processes 1;

events {
    worker_connections 1024;
}

http {
    log_format custom_format '$remote_addr - $remote_user [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" '
                             'Request body: $request_body '
                             'Response headers: $sent_http_content_type';

    access_log /tmp/access.log custom_format;
    lua_need_request_body on;

    server {
        listen 80;
        server_name _;

        location / {
            proxy_pass http://172.17.0.1:8080;  # Indirizza verso il backend API
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Loggare il body della richiesta e gli header
            access_by_lua_block {
                ngx.req.read_body()  -- Leggere il corpo della richiesta
                local req_body = ngx.req.get_body_data()  -- Ottenere il corpo della richiesta
                local headers = ngx.req.get_headers()  -- Ottenere gli header della richiesta
                local header_log = "Request Headers: "
                
                for k, v in pairs(headers) do
                    header_log = header_log .. k .. ": " .. v .. " | "
                end
                
                ngx.log(ngx.ERR, header_log)  -- Logga tutti gli header della richiesta
                
                if req_body then
                    ngx.log(ngx.ERR, "Request body: ", req_body)
                else
                    ngx.log(ngx.ERR, "No request body found")
                end
            }

            # Catturare e loggare il body della risposta e gli header
            body_filter_by_lua_block {
                local resp_body = ngx.arg[1]
                if not ngx.ctx.buffered then
                    ngx.ctx.buffered = ""
                end
                ngx.ctx.buffered = ngx.ctx.buffered .. (resp_body or "")

                if ngx.arg[2] then  -- Alla fine della risposta
                    -- Loggare il corpo della risposta
                    ngx.log(ngx.ERR, "Response body: ", ngx.ctx.buffered)

                    -- Loggare gli header della risposta
                    local headers = ngx.resp.get_headers()
                    local response_headers = "Response Headers: "
                    for k, v in pairs(headers) do
                        response_headers = response_headers .. k .. ": " .. v .. " | "
                    end
                    ngx.log(ngx.ERR, response_headers)
                end
            }
        }
    }
}